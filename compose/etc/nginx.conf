worker_processes 1;

events {
    worker_connections 64;
}

http {
    include mime.types;
    default_type application/octet-stream;

    gzip on;
    gzip_proxied any;
    gzip_types application/json application/javascript text/css;

    ssl_certificate proxy.crt;
    ssl_certificate_key proxy.key;
    ssl_session_cache shared:SSL:5m;
    ssl_session_timeout 30m;
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
    ssl_prefer_server_ciphers on;

    proxy_cache_path /etc/nginx/cache levels=1:2 keys_zone=dflow:1m max_size=100m inactive=120m use_temp_path=off;

    server {
        listen 8000;
        return 301 https://localhost:8443$request_uri;
    }

    server {
        listen 8443 ssl;
        location / {
            proxy_pass http://normandy:8000;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            add_header X-Cached $upstream_cache_status;

            # Enable cache. Matches proxy_cache_path above.
            proxy_cache dflow;

            # these two directives configures nginx to
            # use stale cache entries when updating so the
            # docker container gets only a single HTTP request
            proxy_cache_use_stale updating;
            proxy_cache_lock on;

            gzip on;
            gzip_proxied any;
            gzip_types application/json application/javascript text/css;
        }
    }
}
